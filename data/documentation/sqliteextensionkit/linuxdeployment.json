{"metadata":{"role":"article","modules":[{"name":"SQLiteExtensionKit"}],"title":"Linux Deployment","roleHeading":"Article"},"kind":"article","identifier":{"url":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/LinuxDeployment","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"abstract":[{"type":"text","text":"Deploy SQLite extensions as loadable libraries on Linux systems."}],"seeAlsoSections":[{"generated":true,"title":"Platform-Specific Deployment","anchor":"Platform-Specific-Deployment","identifiers":["doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/iOSIntegration","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/AndroidIntegration","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/WindowsDeployment"]}],"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Linux provides the most straightforward deployment model for SQLite extensions. You can build loadable "},{"type":"codeVoice","code":".so"},{"type":"text","text":" (shared object) files that SQLite can load at runtime using the standard "},{"type":"codeVoice","code":"load_extension()"},{"type":"text","text":" function."}]},{"type":"heading","text":"Prerequisites","level":2,"anchor":"Prerequisites"},{"type":"heading","text":"System Requirements","level":3,"anchor":"System-Requirements"},{"items":[{"content":[{"inlineContent":[{"text":"Linux distribution (Ubuntu, Debian, RHEL, etc.)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift 6.0 or later"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"SQLite 3.x with extension loading enabled"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"GCC or Clang compiler","type":"text"}]}]}],"type":"unorderedList"},{"type":"heading","text":"Install Dependencies","level":3,"anchor":"Install-Dependencies"},{"type":"heading","text":"Ubuntu\/Debian","level":4,"anchor":"UbuntuDebian"},{"type":"codeListing","syntax":"bash","code":["sudo apt-get update","sudo apt-get install -y \\","    libsqlite3-dev \\","    sqlite3 \\","    build-essential"]},{"type":"heading","text":"RHEL\/CentOS\/Fedora","level":4,"anchor":"RHELCentOSFedora"},{"type":"codeListing","syntax":"bash","code":["sudo yum install -y \\","    sqlite-devel \\","    sqlite \\","    gcc \\","    make"]},{"type":"heading","text":"Arch Linux","level":4,"anchor":"Arch-Linux"},{"type":"codeListing","syntax":"bash","code":["sudo pacman -S sqlite gcc make"]},{"type":"heading","text":"Building for Linux","level":2,"anchor":"Building-for-Linux"},{"type":"heading","text":"Step 1: Configure Package","level":3,"anchor":"Step-1-Configure-Package"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":" should specify dynamic library type:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ swift-tools-version: 6.0","import PackageDescription","","let package = Package(","    name: \"MyExtension\",","    products: [","        .library(","            name: \"MyExtension\",","            type: .dynamic,","            targets: [\"MyExtension\"]","        )","    ],","    dependencies: [","        .package(url: \"https:\/\/github.com\/wendylabsinc\/sqlite-extension-kit\", from: \"0.0.3\")","    ],","    targets: [","        .target(","            name: \"MyExtension\",","            dependencies: [\"SQLiteExtensionKit\"]","        )","    ]",")"]},{"type":"heading","text":"Step 2: Build the Extension","level":3,"anchor":"Step-2-Build-the-Extension"},{"type":"codeListing","syntax":"bash","code":["# Build in release mode","swift build -c release","","# The extension will be at:","# .build\/release\/libMyExtension.so"]},{"type":"heading","text":"Step 3: Verify the Build","level":3,"anchor":"Step-3-Verify-the-Build"},{"type":"codeListing","syntax":"bash","code":["# Check that it's a shared library","file .build\/release\/libMyExtension.so","# Output: ELF 64-bit LSB shared object, x86-64...","","# Check exported symbols","nm -D .build\/release\/libMyExtension.so | grep init","# Output: ... T sqlite3_myextension_init","","# Check dependencies","ldd .build\/release\/libMyExtension.so"]},{"type":"heading","text":"Loading Extensions in SQLite","level":2,"anchor":"Loading-Extensions-in-SQLite"},{"type":"heading","text":"Method 1: SQLite CLI","level":3,"anchor":"Method-1-SQLite-CLI"},{"type":"codeListing","syntax":"bash","code":["# Start SQLite","sqlite3 mydata.db","","# Load the extension","sqlite> .load .build\/release\/libMyExtension.so","","# Use the extension functions","sqlite> SELECT my_func();"]},{"type":"heading","text":"Method 2: SQL Statement","level":3,"anchor":"Method-2-SQL-Statement"},{"type":"codeListing","syntax":"sql","code":["-- Enable extension loading (if not already enabled)","PRAGMA compile_options;  -- Check for ENABLE_LOAD_EXTENSION","","-- Load the extension","SELECT load_extension('.build\/release\/libMyExtension.so');","","-- Use the functions","SELECT my_func();"]},{"type":"heading","text":"Method 3: C API","level":3,"anchor":"Method-3-C-API"},{"type":"codeListing","syntax":"c","code":["#include <sqlite3.h>","#include <stdio.h>","","int main() {","    sqlite3 *db;","    char *err_msg = NULL;","","    \/\/ Open database","    if (sqlite3_open(\"mydata.db\", &db) != SQLITE_OK) {","        fprintf(stderr, \"Cannot open database: %s\\n\", sqlite3_errmsg(db));","        return 1;","    }","","    \/\/ Enable extension loading","    sqlite3_enable_load_extension(db, 1);","","    \/\/ Load the extension","    if (sqlite3_load_extension(db, \".build\/release\/libMyExtension.so\", NULL, &err_msg) != SQLITE_OK) {","        fprintf(stderr, \"Cannot load extension: %s\\n\", err_msg);","        sqlite3_free(err_msg);","        return 1;","    }","","    \/\/ Use the extension","    sqlite3_stmt *stmt;","    sqlite3_prepare_v2(db, \"SELECT my_func()\", -1, &stmt, NULL);","    sqlite3_step(stmt);","","    const unsigned char *result = sqlite3_column_text(stmt, 0);","    printf(\"Result: %s\\n\", result);","","    sqlite3_finalize(stmt);","    sqlite3_close(db);","    return 0;","}"]},{"type":"paragraph","inlineContent":[{"text":"Compile and run:","type":"text"}]},{"type":"codeListing","syntax":"bash","code":["gcc -o test test.c -lsqlite3",".\/test"]},{"type":"heading","text":"Deployment Strategies","level":2,"anchor":"Deployment-Strategies"},{"type":"heading","text":"Strategy 1: System-Wide Installation","level":3,"anchor":"Strategy-1-System-Wide-Installation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Install the extension globally:"}]},{"type":"codeListing","syntax":"bash","code":["# Copy to system library path","sudo cp .build\/release\/libMyExtension.so \/usr\/local\/lib\/","","# Update library cache","sudo ldconfig","","# Load from anywhere","sqlite3 mydata.db \".load libMyExtension\""]},{"type":"heading","text":"Strategy 2: Application Bundle","level":3,"anchor":"Strategy-2-Application-Bundle"},{"type":"paragraph","inlineContent":[{"text":"Bundle with your application:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["myapp\/","├── bin\/","│   └── myapp","├── lib\/","│   └── libMyExtension.so","└── data\/","    └── myapp.db"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use relative path:"}]},{"type":"codeListing","syntax":"bash","code":["# Set LD_LIBRARY_PATH","export LD_LIBRARY_PATH=.\/lib:$LD_LIBRARY_PATH",".\/bin\/myapp"]},{"type":"heading","text":"Strategy 3: Docker Container","level":3,"anchor":"Strategy-3-Docker-Container"},{"type":"paragraph","inlineContent":[{"text":"Create a Dockerfile:","type":"text"}]},{"type":"codeListing","syntax":"dockerfile","code":["FROM swift:6.0-focal","","# Install SQLite","RUN apt-get update && apt-get install -y \\","    sqlite3 \\","    libsqlite3-dev \\","    && rm -rf \/var\/lib\/apt\/lists\/*","","# Copy source","WORKDIR \/app","COPY . .","","# Build extension","RUN swift build -c release","","# Install extension","RUN cp .build\/release\/libMyExtension.so \/usr\/local\/lib\/","RUN ldconfig","","# Run application","CMD [\"sqlite3\", \"\/data\/app.db\"]"]},{"type":"paragraph","inlineContent":[{"text":"Build and run:","type":"text"}]},{"type":"codeListing","syntax":"bash","code":["docker build -t myapp-with-extension .","docker run -v $(pwd)\/data:\/data myapp-with-extension"]},{"type":"heading","text":"Server Deployment","level":2,"anchor":"Server-Deployment"},{"type":"heading","text":"Apache + mod_wsgi (Python)","level":3,"anchor":"Apache-+-modwsgi-Python"},{"type":"codeListing","syntax":"python","code":["import sqlite3","import os","","# Get extension path","EXTENSION_PATH = os.path.join(","    os.path.dirname(__file__),","    'lib\/libMyExtension.so'",")","","def get_db():","    db = sqlite3.connect('\/var\/www\/data\/app.db')","    db.enable_load_extension(True)","    db.load_extension(EXTENSION_PATH)","    db.enable_load_extension(False)","    return db","","def application(environ, start_response):","    db = get_db()","    cursor = db.execute(\"SELECT my_func()\")","    result = cursor.fetchone()[0]","","    output = f'Result: {result}'","    response_headers = [('Content-type', 'text\/plain')]","    start_response('200 OK', response_headers)","    return [output.encode('utf-8')]"]},{"type":"heading","text":"Nginx + uWSGI","level":3,"anchor":"Nginx-+-uWSGI"},{"type":"paragraph","inlineContent":[{"text":"uwsgi.ini:","type":"text"}]},{"type":"codeListing","syntax":"ini","code":["[uwsgi]","module = app:application","master = true","processes = 4","","# Set library path","env = LD_LIBRARY_PATH=\/app\/lib:$LD_LIBRARY_PATH","","socket = \/tmp\/uwsgi.sock","chmod-socket = 666","vacuum = true"]},{"type":"heading","text":"systemd Service","level":3,"anchor":"systemd-Service"},{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"code":"\/etc\/systemd\/system\/myapp.service","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"ini","code":["[Unit]","Description=My Application with SQLite Extension","After=network.target","","[Service]","Type=simple","User=myapp","WorkingDirectory=\/opt\/myapp","Environment=\"LD_LIBRARY_PATH=\/opt\/myapp\/lib\"","ExecStart=\/opt\/myapp\/bin\/myapp","Restart=always","","[Install]","WantedBy=multi-user.target"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Enable and start:"}]},{"type":"codeListing","syntax":"bash","code":["sudo systemctl daemon-reload","sudo systemctl enable myapp","sudo systemctl start myapp"]},{"type":"heading","text":"Security Considerations","level":2,"anchor":"Security-Considerations"},{"type":"heading","text":"File Permissions","level":3,"anchor":"File-Permissions"},{"type":"paragraph","inlineContent":[{"text":"Set appropriate permissions:","type":"text"}]},{"type":"codeListing","syntax":"bash","code":["# Extension library","chmod 644 \/usr\/local\/lib\/libMyExtension.so","chown root:root \/usr\/local\/lib\/libMyExtension.so","","# Database file","chmod 660 \/var\/lib\/myapp\/data.db","chown myapp:myapp \/var\/lib\/myapp\/data.db"]},{"type":"heading","text":"Extension Loading Control","level":3,"anchor":"Extension-Loading-Control"},{"type":"paragraph","inlineContent":[{"text":"Limit extension loading:","type":"text"}]},{"type":"codeListing","syntax":"c","code":["\/\/ Only allow specific extensions","int load_trusted_extension(sqlite3 *db, const char *path) {","    \/\/ Verify extension path","    if (strstr(path, \"..\") != NULL) {","        return SQLITE_ERROR;  \/\/ Prevent directory traversal","    }","","    \/\/ Check extension is in trusted directory","    if (strncmp(path, \"\/usr\/local\/lib\/\", 15) != 0) {","        return SQLITE_ERROR;","    }","","    sqlite3_enable_load_extension(db, 1);","    int rc = sqlite3_load_extension(db, path, NULL, NULL);","    sqlite3_enable_load_extension(db, 0);","","    return rc;","}"]},{"type":"heading","text":"SELinux\/AppArmor","level":3,"anchor":"SELinuxAppArmor"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Configure security modules:"}]},{"type":"codeListing","syntax":"bash","code":["# SELinux: Allow extension loading","sudo semanage fcontext -a -t lib_t \"\/usr\/local\/lib\/libMyExtension.so\"","sudo restorecon -v \/usr\/local\/lib\/libMyExtension.so","","# AppArmor: Add to profile","\/usr\/local\/lib\/libMyExtension.so r,"]},{"type":"heading","text":"Performance Optimization","level":2,"anchor":"Performance-Optimization"},{"type":"heading","text":"Build with Optimizations","level":3,"anchor":"Build-with-Optimizations"},{"type":"codeListing","syntax":"bash","code":["# Build with aggressive optimizations","swift build -c release -Xswiftc -O -Xswiftc -whole-module-optimization","","# Strip debug symbols","strip .build\/release\/libMyExtension.so"]},{"type":"heading","text":"Preload Extension","level":3,"anchor":"Preload-Extension"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For frequently used extensions:"}]},{"type":"codeListing","syntax":"c","code":["\/\/ Preload into shared memory","#include <dlfcn.h>","","void *handle = dlopen(\"\/usr\/local\/lib\/libMyExtension.so\", RTLD_NOW | RTLD_GLOBAL);","if (handle == NULL) {","    fprintf(stderr, \"Cannot preload: %s\\n\", dlerror());","}"]},{"type":"heading","text":"Connection Pooling","level":3,"anchor":"Connection-Pooling"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use connection pooling to avoid repeated loading:"}]},{"type":"codeListing","syntax":"python","code":["from sqlite3 import connect","from contextlib import contextmanager","","class ConnectionPool:","    def __init__(self, db_path, extension_path, pool_size=5):","        self.db_path = db_path","        self.extension_path = extension_path","        self.pool = []","        for _ in range(pool_size):","            conn = self._create_connection()","            self.pool.append(conn)","","    def _create_connection(self):","        conn = connect(self.db_path, check_same_thread=False)","        conn.enable_load_extension(True)","        conn.load_extension(self.extension_path)","        conn.enable_load_extension(False)","        return conn","","    @contextmanager","    def get_connection(self):","        conn = self.pool.pop()","        try:","            yield conn","        finally:","            self.pool.append(conn)"]},{"type":"heading","text":"Monitoring and Logging","level":2,"anchor":"Monitoring-and-Logging"},{"type":"heading","text":"Check Extension Load","level":3,"anchor":"Check-Extension-Load"},{"type":"codeListing","syntax":"sql","code":["-- Verify extension is loaded","SELECT * FROM pragma_function_list WHERE name = 'my_func';"]},{"type":"heading","text":"Log Extension Usage","level":3,"anchor":"Log-Extension-Usage"},{"type":"paragraph","inlineContent":[{"text":"Add logging to extension:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","","try db.createScalarFunction(name: \"my_func\") { context, args in","    \/\/ Log usage","    let timestamp = ISO8601DateFormatter().string(from: Date())","    print(\"[\\(timestamp)] my_func called with \\(args.count) args\")","","    \/\/ Implementation","    context.result(\"result\")","}"]},{"type":"heading","text":"Monitor Performance","level":3,"anchor":"Monitor-Performance"},{"type":"codeListing","syntax":"bash","code":["# Use strace to monitor extension loading","strace -e open,openat sqlite3 mydata.db \".load libMyExtension.so\"","","# Profile with perf","perf record -g sqlite3 mydata.db","perf report"]},{"type":"heading","text":"Troubleshooting","level":2,"anchor":"Troubleshooting"},{"type":"heading","text":"Extension Not Found","level":3,"anchor":"Extension-Not-Found"},{"type":"codeListing","syntax":"bash","code":["# Check library search path","echo $LD_LIBRARY_PATH","","# Find the extension","find \/ -name \"libMyExtension.so\" 2>\/dev\/null","","# Use absolute path","sqlite3 mydata.db \".load \/full\/path\/to\/libMyExtension.so\""]},{"type":"heading","text":"Symbol Errors","level":3,"anchor":"Symbol-Errors"},{"type":"codeListing","syntax":null,"code":["Error: \/path\/to\/libMyExtension.so: undefined symbol: swift_retain"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Solution: Ensure Swift runtime is available:"}]},{"type":"codeListing","syntax":"bash","code":["# Check Swift runtime location","ldconfig -p | grep swift","","# Add Swift lib path","export LD_LIBRARY_PATH=\/usr\/lib\/swift\/linux:$LD_LIBRARY_PATH"]},{"type":"heading","text":"Version Conflicts","level":3,"anchor":"Version-Conflicts"},{"type":"paragraph","inlineContent":[{"text":"If multiple SQLite versions exist:","type":"text"}]},{"type":"codeListing","syntax":"bash","code":["# Check SQLite version","sqlite3 --version","","# Check compiled version","strings libMyExtension.so | grep sqlite","","# Use LD_PRELOAD if needed","LD_PRELOAD=\/usr\/local\/lib\/libsqlite3.so.0 sqlite3"]},{"type":"heading","text":"Next Steps","level":2,"anchor":"Next-Steps"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/WindowsDeployment","type":"reference","isActive":true},{"text":" for Windows-specific deployment","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn about "},{"type":"text","text":"doc:DeploymentGuide"},{"type":"text","text":" for general deployment strategies"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Explore "},{"type":"text","text":"doc:AdvancedFunctions"},{"type":"text","text":" for complex extension features"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit"]]},"variants":[{"paths":["\/documentation\/sqliteextensionkit\/linuxdeployment"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/WindowsDeployment":{"abstract":[{"type":"text","text":"Deploy SQLite extensions as loadable DLL files on Windows systems."}],"title":"Windows Deployment","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/WindowsDeployment","type":"topic","role":"article","kind":"article","url":"\/documentation\/sqliteextensionkit\/windowsdeployment"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit":{"type":"topic","role":"collection","kind":"symbol","url":"\/documentation\/sqliteextensionkit","abstract":[{"type":"text","text":"Build type-safe SQLite extensions with Swift."}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit","title":"SQLiteExtensionKit"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/AndroidIntegration":{"title":"Android Integration","type":"topic","url":"\/documentation\/sqliteextensionkit\/androidintegration","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/AndroidIntegration","kind":"article","role":"article","abstract":[{"type":"text","text":"Integrate Swift-based SQLite extensions into Android applications."}]},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/iOSIntegration":{"type":"topic","role":"article","kind":"article","url":"\/documentation\/sqliteextensionkit\/iosintegration","abstract":[{"type":"text","text":"Integrate SQLite extensions into iOS applications using static libraries."}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/iOSIntegration","title":"iOS Integration"}}}