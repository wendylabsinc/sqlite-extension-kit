{"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"SQLiteExtensionKit"}],"title":"Android Integration"},"kind":"article","sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/AndroidIntegration","interfaceLanguage":"swift"},"abstract":[{"text":"Integrate Swift-based SQLite extensions into Android applications.","type":"text"}],"seeAlsoSections":[{"title":"Platform-Specific Deployment","generated":true,"identifiers":["doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/iOSIntegration","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/LinuxDeployment","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/WindowsDeployment"],"anchor":"Platform-Specific-Deployment"}],"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"text":"Android can use SQLite extensions, but since SQLiteExtensionKit is written in Swift, you need to bridge between Swift and Java\/Kotlin through JNI (Java Native Interface). This guide covers two approaches: using Swift for Android or creating a C wrapper.","type":"text"}],"type":"paragraph"},{"anchor":"Approach-1-Swift-for-Android-Experimental","text":"Approach 1: Swift for Android (Experimental)","level":2,"type":"heading"},{"inlineContent":[{"text":"Swift for Android is under active development. This approach compiles Swift code directly for Android.","type":"text"}],"type":"paragraph"},{"anchor":"Prerequisites","text":"Prerequisites","level":3,"type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Swift 6.0 or later with Android toolchain"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Android NDK r25 or later"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Android SDK with API level 21+"}]}]}],"type":"unorderedList"},{"anchor":"Step-1-Set-Up-Swift-for-Android","text":"Step 1: Set Up Swift for Android","level":3,"type":"heading"},{"syntax":"bash","code":["# Install Swift for Android toolchain","# Follow: https:\/\/github.com\/swiftlang\/swift\/blob\/main\/docs\/Android.md","","# Verify installation","swiftc --version"],"type":"codeListing"},{"anchor":"Step-2-Configure-Build-for-Android","text":"Step 2: Configure Build for Android","level":3,"type":"heading"},{"inlineContent":[{"text":"Create ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":" for Android build:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ swift-tools-version: 6.0","import PackageDescription","","let package = Package(","    name: \"MyExtension\",","    platforms: [.android(api: 21)],","    products: [","        .library(","            name: \"MyExtension\",","            type: .static,","            targets: [\"MyExtension\"]","        )","    ],","    dependencies: [","        .package(url: \"https:\/\/github.com\/wendylabsinc\/sqlite-extension-kit\", from: \"0.0.3\")","    ],","    targets: [","        .target(","            name: \"MyExtension\",","            dependencies: [\"SQLiteExtensionKit\"]","        )","    ]",")"],"type":"codeListing"},{"anchor":"Step-3-Build-for-Android-Architectures","text":"Step 3: Build for Android Architectures","level":3,"type":"heading"},{"syntax":"bash","code":["# Build for different Android ABIs","swift build -c release \\","  --triple aarch64-unknown-linux-android \\","  --sdk $ANDROID_NDK\/toolchains\/llvm\/prebuilt\/linux-x86_64","","swift build -c release \\","  --triple armv7-unknown-linux-android \\","  --sdk $ANDROID_NDK\/toolchains\/llvm\/prebuilt\/linux-x86_64","","swift build -c release \\","  --triple x86_64-unknown-linux-android \\","  --sdk $ANDROID_NDK\/toolchains\/llvm\/prebuilt\/linux-x86_64"],"type":"codeListing"},{"anchor":"Step-4-Create-JNI-Wrapper","text":"Step 4: Create JNI Wrapper","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Create a JNI wrapper in C to bridge Java\/Kotlin to Swift:"}],"type":"paragraph"},{"syntax":"c","code":["\/\/ jni_wrapper.c","#include <jni.h>","#include <sqlite3.h>","","\/\/ Import Swift function","extern int registerMyExtension(sqlite3* db);","","JNIEXPORT jint JNICALL","Java_com_example_myapp_SQLiteExtensions_registerExtension(","    JNIEnv* env,","    jobject thiz,","    jlong db_pointer",") {","    sqlite3* db = (sqlite3*)db_pointer;","    return registerMyExtension(db);","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Expose Swift registration to C:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ In your Swift extension file","@_cdecl(\"registerMyExtension\")","public func registerMyExtension(_ db: OpaquePointer) -> Int32 {","    do {","        let database = SQLiteDatabase(db)","        try MyExtension.register(with: database)","        return 0  \/\/ Success","    } catch {","        return 1  \/\/ Error","    }","}"],"type":"codeListing"},{"anchor":"Approach-2-C-Wrapper-Recommended","text":"Approach 2: C Wrapper (Recommended)","level":2,"type":"heading"},{"inlineContent":[{"text":"For production use, create a pure C wrapper that can be easily integrated with Android.","type":"text"}],"type":"paragraph"},{"anchor":"Step-1-Create-C-Wrapper-Layer","text":"Step 1: Create C Wrapper Layer","level":3,"type":"heading"},{"syntax":"c","code":["\/\/ my_extension_wrapper.c","#include <sqlite3.h>","#include <string.h>","","\/\/ C implementation of your extension","static void my_func_impl(","    sqlite3_context* context,","    int argc,","    sqlite3_value** argv",") {","    const char* result = \"Hello from C!\";","    sqlite3_result_text(context, result, -1, SQLITE_TRANSIENT);","}","","\/\/ Registration function","int register_my_extension(sqlite3* db) {","    int rc = sqlite3_create_function(","        db,","        \"my_func\",","        0,  \/\/ argc","        SQLITE_UTF8 | SQLITE_DETERMINISTIC,","        NULL,","        my_func_impl,","        NULL,","        NULL","    );","    return rc;","}","","\/\/ JNI wrapper","JNIEXPORT jint JNICALL","Java_com_example_myapp_SQLiteExtensions_registerExtension(","    JNIEnv* env,","    jobject thiz,","    jlong db_pointer",") {","    sqlite3* db = (sqlite3*)db_pointer;","    return register_my_extension(db);","}"],"type":"codeListing"},{"anchor":"Step-2-Create-Androidmk","text":"Step 2: Create Android.mk","level":3,"type":"heading"},{"syntax":"makefile","code":["LOCAL_PATH := $(call my-dir)","","include $(CLEAR_VARS)","LOCAL_MODULE := my_extension","LOCAL_SRC_FILES := my_extension_wrapper.c","LOCAL_LDLIBS := -llog","include $(BUILD_SHARED_LIBRARY)"],"type":"codeListing"},{"inlineContent":[{"text":"Or use CMake (","type":"text"},{"type":"codeVoice","code":"CMakeLists.txt"},{"text":"):","type":"text"}],"type":"paragraph"},{"syntax":"cmake","code":["cmake_minimum_required(VERSION 3.10)","project(MyExtension)","","add_library(my_extension SHARED","    my_extension_wrapper.c",")","","target_link_libraries(my_extension","    log",")"],"type":"codeListing"},{"anchor":"Step-3-Build-with-Android-NDK","text":"Step 3: Build with Android NDK","level":3,"type":"heading"},{"syntax":"bash","code":["# Using ndk-build","cd jni","ndk-build","","# Or using CMake","mkdir build && cd build","cmake .. \\","  -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK\/build\/cmake\/android.toolchain.cmake \\","  -DANDROID_ABI=arm64-v8a \\","  -DANDROID_PLATFORM=android-21","make"],"type":"codeListing"},{"anchor":"Step-4-Create-KotlinJava-Interface","text":"Step 4: Create Kotlin\/Java Interface","level":3,"type":"heading"},{"syntax":"kotlin","code":["\/\/ SQLiteExtensions.kt","package com.example.myapp","","import android.database.sqlite.SQLiteDatabase","","object SQLiteExtensions {","    init {","        System.loadLibrary(\"my_extension\")","    }","","    \/**","     * Register the SQLite extension with the database.","     *","     * @param db SQLiteDatabase instance","     * @return 0 on success, non-zero on error","     *\/","    external fun registerExtension(dbPointer: Long): Int","","    \/**","     * Helper to get database pointer from SQLiteDatabase","     *\/","    private fun getDatabasePointer(db: SQLiteDatabase): Long {","        \/\/ Use reflection to get native pointer","        val field = SQLiteDatabase::class.java.getDeclaredField(\"mNativeHandle\")","        field.isAccessible = true","        return field.getLong(db)","    }","","    \/**","     * Register extension with SQLiteDatabase instance","     *\/","    fun register(db: SQLiteDatabase): Boolean {","        val pointer = getDatabasePointer(db)","        return registerExtension(pointer) == 0","    }","}"],"type":"codeListing"},{"anchor":"Step-5-Use-in-Android-App","text":"Step 5: Use in Android App","level":3,"type":"heading"},{"syntax":"kotlin","code":["import android.database.sqlite.SQLiteDatabase","import android.database.sqlite.SQLiteOpenHelper","","class MyDatabaseHelper(context: Context) : SQLiteOpenHelper(","    context,","    DATABASE_NAME,","    null,","    DATABASE_VERSION",") {","    override fun onCreate(db: SQLiteDatabase) {","        \/\/ Register extension when database is created","        if (!SQLiteExtensions.register(db)) {","            throw RuntimeException(\"Failed to register SQLite extension\")","        }","","        \/\/ Now you can use the extension","        db.execSQL(\"CREATE TABLE test (id INTEGER, value TEXT)\")","    }","","    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {","        \/\/ Handle upgrades","    }","","    fun testExtension() {","        readableDatabase.use { db ->","            val cursor = db.rawQuery(\"SELECT my_func()\", null)","            cursor.use {","                if (it.moveToFirst()) {","                    val result = it.getString(0)","                    println(\"Extension result: $result\")","                }","            }","        }","    }","}"],"type":"codeListing"},{"anchor":"Using-with-Room-Database","text":"Using with Room Database","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Integrate with Android’s Room persistence library:"}],"type":"paragraph"},{"syntax":"kotlin","code":["import androidx.room.Database","import androidx.room.RoomDatabase","import androidx.sqlite.db.SupportSQLiteDatabase","","@Database(entities = [User::class], version = 1)","abstract class AppDatabase : RoomDatabase() {","    abstract fun userDao(): UserDao","","    companion object {","        fun build(context: Context): AppDatabase {","            return Room.databaseBuilder(","                context,","                AppDatabase::class.java,","                \"app-database\"","            )","            .addCallback(object : Callback() {","                override fun onCreate(db: SupportSQLiteDatabase) {","                    super.onCreate(db)","                    \/\/ Register extension on database creation","                    registerExtensionWithRoom(db)","                }","","                override fun onOpen(db: SupportSQLiteDatabase) {","                    super.onOpen(db)","                    \/\/ Re-register on each open","                    registerExtensionWithRoom(db)","                }","            })","            .build()","        }","","        private fun registerExtensionWithRoom(db: SupportSQLiteDatabase) {","            \/\/ Get native pointer through reflection","            val dbField = db.javaClass.getDeclaredField(\"mDelegate\")","            dbField.isAccessible = true","            val delegate = dbField.get(db)","","            val connField = delegate.javaClass.getDeclaredField(\"mConnection\")","            connField.isAccessible = true","            val connection = connField.get(delegate)","","            val handleField = connection.javaClass.getDeclaredField(\"mConnectionPtr\")","            handleField.isAccessible = true","            val handle = handleField.getLong(connection)","","            SQLiteExtensions.registerExtension(handle)","        }","    }","}"],"type":"codeListing"},{"anchor":"Gradle-Configuration","text":"Gradle Configuration","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Add to your "},{"type":"codeVoice","code":"app\/build.gradle"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"groovy","code":["android {","    defaultConfig {","        ndk {","            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'","        }","    }","","    sourceSets {","        main {","            jniLibs.srcDirs = ['src\/main\/jniLibs']","        }","    }","}"],"type":"codeListing"},{"anchor":"Testing-on-Android","text":"Testing on Android","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Create instrumented tests:"}],"type":"paragraph"},{"syntax":"kotlin","code":["import androidx.test.ext.junit.runners.AndroidJUnit4","import androidx.test.platform.app.InstrumentationRegistry","import org.junit.Test","import org.junit.runner.RunWith","","@RunWith(AndroidJUnit4::class)","class SQLiteExtensionTest {","    @Test","    fun testExtensionFunction() {","        val context = InstrumentationRegistry.getInstrumentation().targetContext","        val helper = MyDatabaseHelper(context)","        val db = helper.writableDatabase","","        val cursor = db.rawQuery(\"SELECT my_func()\", null)","        cursor.use {","            assert(it.moveToFirst())","            val result = it.getString(0)","            assert(result == \"Hello from C!\")","        }","    }","}"],"type":"codeListing"},{"anchor":"Common-Issues","text":"Common Issues","level":2,"type":"heading"},{"anchor":"UnsatisfiedLinkError","text":"UnsatisfiedLinkError","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"If you get “library not found” errors:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Verify ","type":"text"},{"type":"codeVoice","code":".so"},{"text":" files are in correct directory: ","type":"text"},{"type":"codeVoice","code":"src\/main\/jniLibs\/<ABI>\/"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Check library name matches "},{"code":"System.loadLibrary()","type":"codeVoice"},{"type":"text","text":" call"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure all ABIs are built"}]}]}],"type":"orderedList"},{"anchor":"Method-Not-Found","text":"Method Not Found","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"If JNI methods aren’t found:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Verify JNI function signatures match exactly"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Check "},{"type":"codeVoice","code":"javah"},{"type":"text","text":" or "},{"type":"codeVoice","code":"javac -h"},{"type":"text","text":" generated headers"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Ensure native library is loaded before use"}],"type":"paragraph"}]}],"type":"orderedList"},{"anchor":"Database-Corruption","text":"Database Corruption","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"If database becomes corrupted:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Only register extensions on main database instance","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Don’t call registration multiple times","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ensure thread-safe access to database","type":"text"}]}]}],"type":"orderedList"},{"anchor":"Performance-Considerations","text":"Performance Considerations","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Static linking"}],"type":"strong"},{"text":": Link extension statically for better performance","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"ProGuard","type":"text"}]},{"text":": Add rules to keep extension classes:","type":"text"}]}]}],"type":"unorderedList"},{"syntax":"proguard","code":["-keep class com.example.myapp.SQLiteExtensions { *; }","-keepclassmembers class com.example.myapp.SQLiteExtensions { *; }"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"ABI filtering"}]},{"type":"text","text":": Only include necessary ABIs to reduce APK size"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Distribution","text":"Distribution","level":2,"type":"heading"},{"anchor":"AAR-Library","text":"AAR Library","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Package as an Android Archive:"}],"type":"paragraph"},{"syntax":"gradle","code":["\/\/ library\/build.gradle","android {","    defaultConfig {","        consumerProguardFiles 'consumer-rules.pro'","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Then publish:"}],"type":"paragraph"},{"syntax":"bash","code":[".\/gradlew assembleRelease","# AAR is at: library\/build\/outputs\/aar\/library-release.aar"],"type":"codeListing"},{"anchor":"Maven-Central","text":"Maven Central","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Publish to Maven Central for easy distribution:"}],"type":"paragraph"},{"syntax":"gradle","code":["plugins {","    id 'maven-publish'","    id 'signing'","}","","publishing {","    publications {","        release(MavenPublication) {","            groupId = 'com.example'","            artifactId = 'sqlite-extension'","            version = '1.0.0'","","            from components.release","        }","    }","}"],"type":"codeListing"},{"anchor":"Next-Steps","text":"Next Steps","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/iOSIntegration","isActive":true},{"type":"text","text":" for iOS static library approach"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Learn about "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/LinuxDeployment"},{"type":"text","text":" for server deployments"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Explore "},{"type":"text","text":"doc:AdvancedFunctions"},{"type":"text","text":" for complex extension features"}]}]}],"type":"unorderedList"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/sqliteextensionkit\/androidintegration"]}],"references":{"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/WindowsDeployment":{"abstract":[{"type":"text","text":"Deploy SQLite extensions as loadable DLL files on Windows systems."}],"title":"Windows Deployment","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/WindowsDeployment","type":"topic","role":"article","kind":"article","url":"\/documentation\/sqliteextensionkit\/windowsdeployment"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit":{"type":"topic","role":"collection","kind":"symbol","url":"\/documentation\/sqliteextensionkit","abstract":[{"type":"text","text":"Build type-safe SQLite extensions with Swift."}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit","title":"SQLiteExtensionKit"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/iOSIntegration":{"type":"topic","role":"article","kind":"article","url":"\/documentation\/sqliteextensionkit\/iosintegration","abstract":[{"type":"text","text":"Integrate SQLite extensions into iOS applications using static libraries."}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/iOSIntegration","title":"iOS Integration"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/LinuxDeployment":{"url":"\/documentation\/sqliteextensionkit\/linuxdeployment","title":"Linux Deployment","type":"topic","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/LinuxDeployment","kind":"article","role":"article","abstract":[{"text":"Deploy SQLite extensions as loadable libraries on Linux systems.","type":"text"}]}}}