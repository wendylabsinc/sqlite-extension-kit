{"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"SQLiteExtensionKit"}],"title":"Integrating With GRDB"},"kind":"article","sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/GRDBIntegration"},"abstract":[{"type":"text","text":"Learn how to load SQLiteExtensionKit modules inside "},{"type":"reference","identifier":"https:\/\/github.com\/groue\/GRDB.swift","isActive":true},{"type":"text","text":" "},{"type":"text","text":"applications and validate the behaviour using the bundled Docker-focused sample."}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/AdvancedExamples","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/VirtualTableModule","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/VirtualTableCursor","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/IndexInfo"],"title":"Advanced Features","anchor":"Advanced-Features"}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SQLiteExtensionKit exposes pure-Swift APIs for registering scalar functions, aggregates, and"},{"type":"text","text":" "},{"type":"text","text":"virtual tables with SQLite. When you are already using GRDB for query execution, you can reuse the"},{"type":"text","text":" "},{"type":"text","text":"same extension modules by registering them during database configuration. The "},{"code":"LinuxDockerApp","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"executable (shipped in this repository) demonstrates the minimal glue required: it initialises a"},{"type":"text","text":" "},{"code":"DatabaseQueue","type":"codeVoice"},{"type":"text","text":", registers the sample string functions, and executes a few queries through GRDB."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to see the pattern end to end, run the helper script in the repository root:"}]},{"type":"codeListing","code":["Scripts\/run-linuxdockerapp.sh"],"syntax":"bash"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The script:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Builds the standalone ","type":"text"},{"code":"Examples\/LinuxDockerApp","type":"codeVoice"},{"text":" package (which depends on GRDB 7.8.0).","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Executes the program and captures the output in "},{"type":"codeVoice","code":"Examples\/LinuxDockerApp\/.logs\/"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Verifies that the expected ","type":"text"},{"code":"reverse","type":"codeVoice"},{"text":", ","type":"text"},{"code":"word_count","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"trim_all","type":"codeVoice"},{"text":" function results are present.","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","level":2,"text":"Registering Extensions During GRDB Configuration","anchor":"Registering-Extensions-During-GRDB-Configuration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The key is to hook registration into GRDB’s configuration callback. The sample uses"},{"type":"text","text":" "},{"type":"codeVoice","code":"Configuration.prepareDatabase"},{"type":"text","text":" to obtain the raw SQLite connection and pass it to"},{"type":"text","text":" "},{"type":"codeVoice","code":"SQLiteDatabase"},{"type":"text","text":", which in turn exposes the high-level registration APIs from SQLiteExtensionKit:"}]},{"type":"codeListing","code":["import ExampleExtensions","import GRDB","import SQLiteExtensionKit","","var configuration = Configuration()","configuration.prepareDatabase { db in","    guard let connection = db.sqliteConnection else {","        fatalError(\"Missing sqlite3 handle\")","    }","","    let database = SQLiteDatabase(connection)","    try StringFunctionsExtension.register(with: database)","}","","let queue = try DatabaseQueue(configuration: configuration)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Once configured, you can execute queries through GRDB’s typed APIs and take advantage of the Swift","type":"text"},{"text":" ","type":"text"},{"text":"extensions:","type":"text"}]},{"type":"codeListing","code":["let reversed: String = try queue.read { db in","    try String.fetchOne(db, sql: \"SELECT reverse('docker demo')\") ?? \"\"","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same approach works for aggregate functions, virtual tables, and any additional extension"},{"type":"text","text":" "},{"type":"text","text":"modules you build."}]},{"type":"heading","level":2,"text":"Adapting the Pattern to Your Project","anchor":"Adapting-the-Pattern-to-Your-Project"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Add SQLiteExtensionKit and (optionally) ExampleExtensions as dependencies alongside GRDB.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Register the modules you need inside your GRDB configuration callback"},{"type":"text","text":" "},{"type":"text","text":"("},{"code":"Configuration.prepareDatabase","type":"codeVoice"},{"type":"text","text":", "},{"code":"DatabasePool.Configuration","type":"codeVoice"},{"type":"text","text":", etc.)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exercise the functions through GRDB’s fetching APIs ("},{"type":"codeVoice","code":"fetchOne"},{"type":"text","text":", "},{"type":"codeVoice","code":"fetchAll"},{"type":"text","text":", "},{"type":"codeVoice","code":"Row"},{"type":"text","text":", Query"},{"type":"text","text":" "},{"type":"text","text":"Interface) just like any other SQL feature."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Tip: if you bundle the loadable extension as a dynamic library, you can use the same Swift modules","type":"text"},{"text":" ","type":"text"},{"text":"from GRDB on Apple platforms and dynamic loading on Linux, keeping business logic consistent.","type":"text"}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/sqliteextensionkit\/grdbintegration"]}],"references":{"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit":{"type":"topic","role":"collection","kind":"symbol","url":"\/documentation\/sqliteextensionkit","abstract":[{"type":"text","text":"Build type-safe SQLite extensions with Swift."}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit","title":"SQLiteExtensionKit"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/VirtualTableCursor":{"title":"VirtualTableCursor","abstract":[{"text":"A cursor for iterating over virtual table rows.","type":"text"}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/VirtualTableCursor","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VirtualTableCursor"}],"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/sqliteextensionkit\/virtualtablecursor","navigatorTitle":[{"kind":"identifier","text":"VirtualTableCursor"}]},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/IndexInfo":{"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/sqliteextensionkit\/indexinfo","abstract":[{"text":"Information about query constraints and ordering for virtual table optimization.","type":"text"}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/IndexInfo","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IndexInfo"}],"title":"IndexInfo","navigatorTitle":[{"kind":"identifier","text":"IndexInfo"}]},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/AdvancedExamples":{"abstract":[{"type":"text","text":"Explore advanced extension features including JSON functions, regular expressions, and complex aggregations."}],"title":"Advanced Examples","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/AdvancedExamples","type":"topic","role":"article","kind":"article","url":"\/documentation\/sqliteextensionkit\/advancedexamples"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/VirtualTableModule":{"abstract":[{"type":"text","text":"A protocol for implementing SQLite virtual tables."}],"title":"VirtualTableModule","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/VirtualTableModule","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VirtualTableModule"}],"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/sqliteextensionkit\/virtualtablemodule","navigatorTitle":[{"kind":"identifier","text":"VirtualTableModule"}]}}}