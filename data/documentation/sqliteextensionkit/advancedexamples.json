{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/sqliteextensionkit\/advancedexamples"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"This guide covers advanced extension features beyond basic scalar and aggregate functions, including implementation patterns, memory safety considerations, and production recommendations.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Compiler-Status","type":"heading","text":"Compiler Status"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"No Swift Compiler Warnings","type":"text"}]}],"type":"paragraph"},{"inlineContent":[{"text":"The codebase compiles cleanly with Swift 6.2 in strict concurrency mode with zero warnings when using:","type":"text"}],"type":"paragraph"},{"syntax":"bash","type":"codeListing","code":["swiftly run swift build"]},{"level":2,"anchor":"Advanced-Functions-Extension","type":"heading","text":"Advanced Functions Extension"},{"inlineContent":[{"type":"text","text":"Demonstrates sophisticated function implementations with practical use cases."}],"type":"paragraph"},{"level":3,"anchor":"JSON-Functions","type":"heading","text":"JSON Functions"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"json_extract_simple(json, path)"},{"type":"text","text":" - Extract values from JSON using path syntax"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"json_array_contains(array, value)","type":"codeVoice"},{"text":" - Check if JSON array contains a value","type":"text"}]}]}]},{"level":3,"anchor":"Regular-Expressions","type":"heading","text":"Regular Expressions"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"regexp_match(text, pattern)"},{"text":" - Test if text matches regex pattern","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"regexp_replace(text, pattern, replacement)"},{"text":" - Replace regex matches","type":"text"}],"type":"paragraph"}]}]},{"level":3,"anchor":"String-Similarity","type":"heading","text":"String Similarity"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"levenshtein(s1, s2)","type":"codeVoice"},{"text":" - Calculate edit distance between strings for fuzzy matching","type":"text"}]}]}]},{"level":3,"anchor":"Utilities","type":"heading","text":"Utilities"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"uuid()","type":"codeVoice"},{"text":" - Generate UUID","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"unix_timestamp()"},{"text":" - Get current Unix timestamp","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"iso8601_timestamp()"},{"text":" - Get ISO8601 formatted timestamp","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"url_encode(text)"},{"type":"text","text":" \/ "},{"type":"codeVoice","code":"url_decode(text)"},{"type":"text","text":" - URL encoding\/decoding"}],"type":"paragraph"}]}]},{"level":3,"anchor":"Usage-Example","type":"heading","text":"Usage Example"},{"syntax":"swift","type":"codeListing","code":["try AdvancedFunctionsExtension.register(with: database)"]},{"syntax":"sql","type":"codeListing","code":["-- JSON extraction","SELECT json_extract_simple('{\"name\":\"Alice\",\"age\":30}', '$.name');  -- Returns 'Alice'","","-- Regex matching","SELECT regexp_match('test@example.com', '.*@.*\\\\.com');  -- Returns 1","","-- String similarity for fuzzy matching","SELECT name FROM users WHERE levenshtein(name, 'Alice') < 3;","","-- Generate UUIDs","INSERT INTO records VALUES (uuid(), 'data');"]},{"level":2,"anchor":"Window-Functions-Extension","type":"heading","text":"Window Functions Extension"},{"inlineContent":[{"text":"Provides aggregate functions useful for statistical operations and window-like computations.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Implemented-Functions","type":"heading","text":"Implemented Functions"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"moving_avg(value, window_size)"},{"text":" - Moving average over window","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"running_total(value)"},{"type":"text","text":" - Cumulative sum"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"percentile(value, p)"},{"type":"text","text":" - Calculate percentile (0-100)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"median(value)"},{"text":" - Calculate median (50th percentile)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"string_agg(value, separator)","type":"codeVoice"},{"type":"text","text":" - Aggregate strings with separator"}]}]}]},{"level":3,"anchor":"Usage-Example","type":"heading","text":"Usage Example"},{"syntax":"swift","type":"codeListing","code":["try WindowFunctionsExtension.register(with: database)"]},{"syntax":"sql","type":"codeListing","code":["-- Median calculation","SELECT median(price) FROM products;","","-- 90th percentile","SELECT percentile(response_time, 90) FROM api_logs;","","-- String aggregation","SELECT category, string_agg(product_name, ', ') FROM products GROUP BY category;","","-- Moving average (as aggregate)","SELECT moving_avg(value, 3) FROM (","    SELECT value FROM data ORDER BY date DESC LIMIT 3",");"]},{"level":3,"anchor":"Important-Note","type":"heading","text":"Important Note"},{"inlineContent":[{"text":"These are implemented as aggregate functions. True SQLite window functions require additional C-level integration with the window function interface (xStep, xInverse, xValue, xFinal callbacks). The current implementation works for aggregate contexts but doesnâ€™t support the full OVER clause syntax.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Virtual-Table-Architecture","type":"heading","text":"Virtual Table Architecture"},{"inlineContent":[{"type":"text","text":"Demonstrates the virtual table protocol design for creating table-like interfaces to custom data sources."}],"type":"paragraph"},{"level":3,"anchor":"Features","type":"heading","text":"Features"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol-based API ("},{"type":"codeVoice","code":"VirtualTableModule"},{"type":"text","text":", "},{"type":"codeVoice","code":"VirtualTableCursor"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type-safe column value handling"}]}]},{"content":[{"inlineContent":[{"text":"Query optimization with ","type":"text"},{"code":"bestIndex","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Example in-memory key-value store implementation","type":"text"}],"type":"paragraph"}]}]},{"level":3,"anchor":"Implementation-Status","type":"heading","text":"Implementation Status"},{"inlineContent":[{"text":"This provides the Swift-side types and protocols for virtual tables. The example shows:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"How to structure a virtual table module","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Cursor iteration patterns"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Query constraint handling"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Index optimization"}],"type":"paragraph"}]}]},{"level":3,"anchor":"Important-Limitation","type":"heading","text":"Important Limitation"},{"inlineContent":[{"type":"text","text":"Full virtual table registration requires C function pointers for the "},{"type":"codeVoice","code":"sqlite3_module"},{"type":"text","text":" interface. This is beyond the scope of pure Swift extensions because:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"SQLite expects C function pointers for all module callbacks","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The module must remain valid for the lifetime of the database"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Memory management is complex with bidirectional C-Swift ownership"}]}]}]},{"inlineContent":[{"text":"For production virtual tables, you would need to:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create C wrapper functions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Register them with "},{"type":"codeVoice","code":"sqlite3_create_module_v2"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bridge to Swift implementation"}]}]}]},{"inlineContent":[{"type":"text","text":"The provided code serves as a reference architecture for the Swift layer."}],"type":"paragraph"},{"level":2,"anchor":"Memory-Safety-Considerations","type":"heading","text":"Memory Safety Considerations"},{"level":3,"anchor":"Aggregate-Context-Usage","type":"heading","text":"Aggregate Context Usage"},{"inlineContent":[{"type":"text","text":"When using "},{"type":"codeVoice","code":"sqlite3_aggregate_context()"},{"type":"text","text":", be aware of memory safety requirements."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Safe Patterns:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Simple value types","let aggCtx = sqlite3_aggregate_context(context.pointer, 8)","let valuePtr = aggCtx!.assumingMemoryBound(to: Double.self)","valuePtr.pointee += value"]},{"syntax":"swift","type":"codeListing","code":["\/\/ Tuples of simple types","let aggCtx = sqlite3_aggregate_context(context.pointer, 16)","let statePtr = aggCtx!.assumingMemoryBound(to: (sum: Double, count: Int64).self)","statePtr.pointee.sum += value","statePtr.pointee.count += 1"]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Complex Types Require Care:"}]}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Arrays and strings need manual memory management","\/\/ The aggregate context is just raw bytes - no automatic reference counting","struct UnsafeState {","    var values: [Double]  \/\/ WARNING: This won't work correctly!","}","","\/\/ Better: Use fixed-size buffers or manage lifecycle explicitly"]},{"inlineContent":[{"type":"text","text":"For complex state, consider:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Using simpler fixed-size types"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allocating separate Swift objects and storing only a pointer","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Implementing proper cleanup in the final callback","type":"text"}],"type":"paragraph"}]}]},{"level":2,"anchor":"Testing-Advanced-Features","type":"heading","text":"Testing Advanced Features"},{"inlineContent":[{"type":"text","text":"The advanced functions have comprehensive integration tests:"}],"type":"paragraph"},{"syntax":"bash","type":"codeListing","code":["# Run all tests","swiftly run swift test","","# Run specific test suite","swiftly run swift test --filter AdvancedFunctionsTests"]},{"inlineContent":[{"text":"Current test coverage:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Advanced Functions: 9 tests passing","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Window Functions: Note on complex state management"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Virtual Tables: Architecture example (not runtime testable without C integration)"}],"type":"paragraph"}]}]},{"level":2,"anchor":"Limitations-and-Future-Work","type":"heading","text":"Limitations and Future Work"},{"level":3,"anchor":"Window-Functions","type":"heading","text":"Window Functions"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Currently implemented as aggregates, not true window functions","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Full window function support requires ","type":"text"},{"code":"xInverse","type":"codeVoice"},{"text":" callback implementation","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Need C-level integration for proper OVER clause support"}],"type":"paragraph"}]}]},{"level":3,"anchor":"Virtual-Tables","type":"heading","text":"Virtual Tables"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Protocol architecture is complete","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Actual registration requires C callback glue code"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Consider this a reference implementation for the design pattern","type":"text"}]}]}]},{"level":3,"anchor":"Collations","type":"heading","text":"Collations"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Custom sort orders require ","type":"text"},{"type":"codeVoice","code":"sqlite3_create_collation_v2"}]}]},{"content":[{"inlineContent":[{"text":"Not included in current examples (requires C callback functions)","type":"text"}],"type":"paragraph"}]}]},{"level":2,"anchor":"Production-Recommendations","type":"heading","text":"Production Recommendations"},{"inlineContent":[{"text":"For production use of advanced features:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"JSON Functions","type":"text"}]},{"type":"text","text":": Consider using SQLiteâ€™s built-in JSON1 extension if available"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Window Functions","type":"text"}]},{"type":"text","text":": Use SQLite 3.28+ built-in window functions where possible"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Virtual Tables","type":"text"}],"type":"strong"},{"type":"text","text":": Implement C wrapper layer for production virtual tables"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Testing"}]},{"type":"text","text":": Add extensive integration tests for your specific use cases"}]}]}]},{"level":2,"anchor":"Building-for-Production","type":"heading","text":"Building for Production"},{"syntax":"bash","type":"codeListing","code":["# Release build with optimizations","swiftly run swift build -c release","","# The extensions are built as:","# - libSQLiteExtensionKit.dylib (core framework)","# - libExampleExtensions.dylib (all examples)"]},{"inlineContent":[{"text":"Load in SQLite:","type":"text"}],"type":"paragraph"},{"syntax":"sql","type":"codeListing","code":[".load .build\/release\/libExampleExtensions.dylib","SELECT json_extract_simple('{\"key\":\"value\"}', '$.key');"]},{"level":2,"anchor":"Platform-Specific-Notes","type":"heading","text":"Platform-Specific Notes"},{"level":3,"anchor":"macOSiOS","type":"heading","text":"macOS\/iOS"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"CryptoKit available for ","type":"text"},{"type":"codeVoice","code":"sha256()"},{"text":" function","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Foundation provides JSON, regex, and URL encoding"}],"type":"paragraph"}]}]},{"level":3,"anchor":"Linux","type":"heading","text":"Linux"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Ensure libc provides necessary functions","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"JSON and regex work via Foundation on Linux","type":"text"}]}]}]},{"level":2,"anchor":"Contributing","type":"heading","text":"Contributing"},{"inlineContent":[{"text":"When adding new advanced functions:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"@_cdecl","type":"codeVoice"},{"text":" for entry points","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Implement proper error handling","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add DocC comments with examples"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Write integration tests"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Document memory safety considerations"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Test on all target platforms"}],"type":"paragraph"}]}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/AdvancedExamples"},"hierarchy":{"paths":[["doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit"]]},"kind":"article","sections":[],"metadata":{"modules":[{"name":"SQLiteExtensionKit"}],"roleHeading":"Article","title":"Advanced Examples","role":"article"},"seeAlsoSections":[{"title":"Related Documentation","anchor":"Related-Documentation","identifiers":["doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/GettingStarted","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/LinuxDeployment","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/WindowsDeployment"]},{"title":"Advanced Features","anchor":"Advanced-Features","identifiers":["doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/GRDBIntegration","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/VirtualTableModule","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/VirtualTableCursor","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/IndexInfo"],"generated":true}],"abstract":[{"type":"text","text":"Explore advanced extension features including JSON functions, regular expressions, and complex aggregations."}],"references":{"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/VirtualTableCursor":{"title":"VirtualTableCursor","abstract":[{"text":"A cursor for iterating over virtual table rows.","type":"text"}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/VirtualTableCursor","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VirtualTableCursor"}],"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/sqliteextensionkit\/virtualtablecursor","navigatorTitle":[{"kind":"identifier","text":"VirtualTableCursor"}]},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit":{"type":"topic","role":"collection","kind":"symbol","url":"\/documentation\/sqliteextensionkit","abstract":[{"type":"text","text":"Build type-safe SQLite extensions with Swift."}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit","title":"SQLiteExtensionKit"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/GettingStarted":{"type":"topic","role":"article","kind":"article","url":"\/documentation\/sqliteextensionkit\/gettingstarted","abstract":[{"text":"Learn how to build your first SQLite extension with Swift.","type":"text"}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/GettingStarted","title":"Getting Started with SQLiteExtensionKit"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/IndexInfo":{"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/sqliteextensionkit\/indexinfo","abstract":[{"text":"Information about query constraints and ordering for virtual table optimization.","type":"text"}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/IndexInfo","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IndexInfo"}],"title":"IndexInfo","navigatorTitle":[{"kind":"identifier","text":"IndexInfo"}]},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/WindowsDeployment":{"abstract":[{"type":"text","text":"Deploy SQLite extensions as loadable DLL files on Windows systems."}],"title":"Windows Deployment","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/WindowsDeployment","type":"topic","role":"article","kind":"article","url":"\/documentation\/sqliteextensionkit\/windowsdeployment"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/GRDBIntegration":{"type":"topic","role":"article","kind":"article","url":"\/documentation\/sqliteextensionkit\/grdbintegration","abstract":[{"text":"Learn how to load SQLiteExtensionKit modules inside ","type":"text"},{"identifier":"https:\/\/github.com\/groue\/GRDB.swift","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"applications and validate the behaviour using the bundled Docker-focused sample.","type":"text"}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/GRDBIntegration","title":"Integrating With GRDB"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/LinuxDeployment":{"url":"\/documentation\/sqliteextensionkit\/linuxdeployment","title":"Linux Deployment","type":"topic","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/LinuxDeployment","kind":"article","role":"article","abstract":[{"text":"Deploy SQLite extensions as loadable libraries on Linux systems.","type":"text"}]},"https://github.com/groue/GRDB.swift":{"title":"GRDB","url":"https:\/\/github.com\/groue\/GRDB.swift","type":"link","titleInlineContent":[{"text":"GRDB","type":"text"}],"identifier":"https:\/\/github.com\/groue\/GRDB.swift"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/VirtualTableModule":{"abstract":[{"type":"text","text":"A protocol for implementing SQLite virtual tables."}],"title":"VirtualTableModule","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/VirtualTableModule","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VirtualTableModule"}],"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/sqliteextensionkit\/virtualtablemodule","navigatorTitle":[{"kind":"identifier","text":"VirtualTableModule"}]}}}