{"variants":[{"paths":["\/documentation\/sqliteextensionkit\/iosintegration"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit"]]},"kind":"article","metadata":{"roleHeading":"Article","modules":[{"name":"SQLiteExtensionKit"}],"title":"iOS Integration","role":"article"},"abstract":[{"text":"Integrate SQLite extensions into iOS applications using static libraries.","type":"text"}],"identifier":{"url":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/iOSIntegration","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"title":"Platform-Specific Deployment","anchor":"Platform-Specific-Deployment","identifiers":["doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/AndroidIntegration","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/LinuxDeployment","doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/WindowsDeployment"]}],"sections":[],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"On iOS, you cannot load dynamic libraries at runtime due to App Store security restrictions. Instead, you must compile your extensions as static libraries and link them directly with SQLite into your application."}]},{"text":"Why Static Libraries on iOS","level":2,"anchor":"Why-Static-Libraries-on-iOS","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"iOS applications cannot use SQLite’s ","type":"text"},{"code":"load_extension()","type":"codeVoice"},{"text":" API because:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"App sandboxing prevents dynamic library loading"}]}]},{"content":[{"inlineContent":[{"text":"Code signing requirements restrict runtime code loading","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"App Store guidelines prohibit downloadable code execution","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Solution","type":"text"}],"type":"strong"},{"text":": Compile extensions as static libraries and register them at app startup.","type":"text"}]},{"text":"Building a Static Library for iOS","level":2,"anchor":"Building-a-Static-Library-for-iOS","type":"heading"},{"text":"Step 1: Configure Package for Static Linking","level":3,"anchor":"Step-1-Configure-Package-for-Static-Linking","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Update your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":" to support static library builds:"}]},{"code":["\/\/ swift-tools-version: 6.0","import PackageDescription","","let package = Package(","    name: \"MyExtension\",","    platforms: [","        .iOS(.v16),","        .macOS(.v13)","    ],","    products: [","        .library(","            name: \"MyExtension\",","            type: .static,  \/\/ Changed to static","            targets: [\"MyExtension\"]","        )","    ],","    dependencies: [","        .package(url: \"https:\/\/github.com\/wendylabsinc\/sqlite-extension-kit\", from: \"0.0.3\")","    ],","    targets: [","        .target(","            name: \"MyExtension\",","            dependencies: [\"SQLiteExtensionKit\"]","        )","    ]",")"],"type":"codeListing","syntax":"swift"},{"text":"Step 2: Create a Registration Function","level":3,"anchor":"Step-2-Create-a-Registration-Function","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of using "},{"type":"codeVoice","code":"@_cdecl"},{"type":"text","text":" for dynamic loading, create a Swift-callable registration function:"}]},{"code":["import SQLiteExtensionKit","import CSQLite","","public struct MyExtension: SQLiteExtensionModule {","    public static let name = \"my_extension\"","","    public static func register(with db: SQLiteDatabase) throws {","        try db.createScalarFunction(name: \"my_func\") { context, args in","            \/\/ Implementation","            context.result(\"Hello from iOS!\")","        }","    }","}","","\/\/\/ Call this function at app startup to register the extension","public func registerMyExtension(with db: OpaquePointer) throws {","    let database = SQLiteDatabase(db)","    try MyExtension.register(with: database)","}"],"type":"codeListing","syntax":"swift"},{"text":"Step 3: Build for iOS Architectures","level":3,"anchor":"Step-3-Build-for-iOS-Architectures","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Build for both simulator and device:","type":"text"}]},{"code":["# Build for iOS Simulator (arm64)","swift build -c release \\","  --triple arm64-apple-ios16.0-simulator","","# Build for iOS Device (arm64)","swift build -c release \\","  --triple arm64-apple-ios16.0","","# Build universal binary (if needed)","lipo -create \\","  .build\/arm64-apple-ios16.0-simulator\/release\/libMyExtension.a \\","  .build\/arm64-apple-ios16.0\/release\/libMyExtension.a \\","  -output libMyExtension-universal.a"],"type":"codeListing","syntax":"bash"},{"text":"Step 4: Integrate into iOS Project","level":3,"anchor":"Step-4-Integrate-into-iOS-Project","type":"heading"},{"text":"Using Swift Package Manager in Xcode","level":4,"anchor":"Using-Swift-Package-Manager-in-Xcode","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Xcode, go to "},{"type":"strong","inlineContent":[{"type":"text","text":"File > Add Packages…"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add your extension package","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Select your target and add the package as a dependency","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"text":"Using CocoaPods","level":4,"anchor":"Using-CocoaPods","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"MyExtension.podspec"},{"type":"text","text":":"}]},{"code":["Pod::Spec.new do |s|","  s.name             = 'MyExtension'","  s.version          = '1.0.0'","  s.summary          = 'SQLite extension for iOS'","  s.homepage         = 'https:\/\/github.com\/yourusername\/MyExtension'","  s.license          = { :type => 'MIT' }","  s.author           = { 'Your Name' => 'email@example.com' }","  s.source           = { :git => 'https:\/\/github.com\/yourusername\/MyExtension.git', :tag => s.version.to_s }","","  s.ios.deployment_target = '16.0'","  s.swift_version = '6.0'","","  s.source_files = 'Sources\/MyExtension\/**\/*.swift'","  s.dependency 'SQLiteExtensionKit'","","  s.libraries = 'sqlite3'","end"],"type":"codeListing","syntax":"ruby"},{"text":"Step 5: Register at App Startup","level":3,"anchor":"Step-5-Register-at-App-Startup","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"In your iOS app, register the extension when opening the database:","type":"text"}]},{"code":["import UIKit","import SQLite3","import MyExtension","","class DatabaseManager {","    private var db: OpaquePointer?","","    func openDatabase() throws {","        let path = try FileManager.default","            .url(for: .documentDirectory, in: .userDomainMask, appropriateFor: nil, create: true)","            .appendingPathComponent(\"app.db\")","            .path","","        guard sqlite3_open(path, &db) == SQLITE_OK else {","            throw DatabaseError.cannotOpen","        }","","        \/\/ Register the extension immediately after opening","        try registerMyExtension(with: db!)","","        \/\/ Now you can use the extension functions","        var stmt: OpaquePointer?","        sqlite3_prepare_v2(db, \"SELECT my_func()\", -1, &stmt, nil)","        sqlite3_step(stmt)","        let result = String(cString: sqlite3_column_text(stmt, 0))","        print(\"Extension result: \\(result)\")","        sqlite3_finalize(stmt)","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Using with GRDB or SQLite.swift","level":2,"anchor":"Using-with-GRDB-or-SQLiteswift","type":"heading"},{"text":"GRDB Integration","level":3,"anchor":"GRDB-Integration","type":"heading"},{"code":["import GRDB","import MyExtension","","let dbQueue = try DatabaseQueue(path: \"\/path\/to\/database.db\")","","try dbQueue.write { db in","    \/\/ Register extension with GRDB's database connection","    try registerMyExtension(with: db.sqliteConnection)","","    \/\/ Use the extension","    let result = try String.fetchOne(db, sql: \"SELECT my_func()\")","    print(result)","}"],"type":"codeListing","syntax":"swift"},{"text":"SQLite.swift Integration","level":3,"anchor":"SQLiteswift-Integration","type":"heading"},{"code":["import SQLite","import MyExtension","","let db = try Connection(\"\/path\/to\/database.db\")","","\/\/ Get the raw sqlite3 pointer","let handle = db.handle","try registerMyExtension(with: handle)","","\/\/ Use the extension","let result = try db.scalar(\"SELECT my_func()\") as! String"],"type":"codeListing","syntax":"swift"},{"text":"Linking with Embedded SQLite","level":2,"anchor":"Linking-with-Embedded-SQLite","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re embedding a custom SQLite build in your iOS app:"}]},{"text":"Step 1: Build SQLite as a Framework","level":3,"anchor":"Step-1-Build-SQLite-as-a-Framework","type":"heading"},{"code":["# Download SQLite amalgamation","curl -O https:\/\/www.sqlite.org\/2024\/sqlite-amalgamation-3450000.zip","unzip sqlite-amalgamation-3450000.zip","","# Create Xcode framework project with sqlite3.c and sqlite3.h","# Or use existing SQLite framework"],"type":"codeListing","syntax":"bash"},{"text":"Step 2: Link Your Extension","level":3,"anchor":"Step-2-Link-Your-Extension","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In your Xcode project:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Add ","type":"text"},{"type":"codeVoice","code":"libMyExtension.a"},{"text":" to your target","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Link against your SQLite framework"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure both are linked in the same binary"}]}]}],"type":"orderedList"},{"text":"Step 3: Verify Linking","level":3,"anchor":"Step-3-Verify-Linking","type":"heading"},{"code":["# Check that symbols are present","nm libMyExtension.a | grep \"my_func\"","","# Verify no duplicate symbols with SQLite","nm -gU YourApp | grep sqlite3"],"type":"codeListing","syntax":"bash"},{"text":"Testing on iOS","level":2,"anchor":"Testing-on-iOS","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create unit tests that verify extension functionality:"}]},{"code":["import XCTest","import SQLite3","@testable import MyExtension","","class MyExtensionTests: XCTestCase {","    var db: OpaquePointer?","","    override func setUp() {","        super.setUp()","        sqlite3_open(\":memory:\", &db)","        try? registerMyExtension(with: db!)","    }","","    override func tearDown() {","        sqlite3_close(db)","        super.tearDown()","    }","","    func testMyFunction() throws {","        var stmt: OpaquePointer?","        sqlite3_prepare_v2(db, \"SELECT my_func()\", -1, &stmt, nil)","        sqlite3_step(stmt)","","        let result = String(cString: sqlite3_column_text(stmt, 0))","        XCTAssertEqual(result, \"Hello from iOS!\")","","        sqlite3_finalize(stmt)","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Common Issues","level":2,"anchor":"Common-Issues","type":"heading"},{"text":"Symbol Conflicts","level":3,"anchor":"Symbol-Conflicts","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If you get duplicate symbol errors:","type":"text"}]},{"code":["duplicate symbol '_sqlite3_open' in:","    libMyExtension.a","    libsqlite3.dylib"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Solution"}],"type":"strong"},{"text":": Ensure you’re not linking both the system SQLite and your extension’s SQLite symbols. Use ","type":"text"},{"code":"-force_load","type":"codeVoice"},{"text":" selectively:","type":"text"}]},{"code":["# In Xcode build settings","OTHER_LDFLAGS = -force_load $(BUILD_DIR)\/libMyExtension.a"],"type":"codeListing","syntax":"bash"},{"text":"Extension Not Found","level":3,"anchor":"Extension-Not-Found","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If functions return “no such function” errors:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"Verify registration is called before using functions","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Check that registration completed without errors","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Ensure the database connection is the same instance"}],"type":"paragraph"}]}],"type":"orderedList"},{"text":"Memory Issues","level":3,"anchor":"Memory-Issues","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If you encounter crashes:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"Ensure database outlives all extension usage","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Don’t capture database pointer in closures","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use proper memory management for aggregate context","type":"text"}]}]}],"type":"orderedList"},{"text":"Performance Considerations","level":2,"anchor":"Performance-Considerations","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Static linking has performance benefits:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Faster startup","type":"text"}],"type":"strong"},{"text":": No runtime loading overhead","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Better optimization"}],"type":"strong"},{"text":": Linker can inline across boundaries","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Smaller binary"}],"type":"strong"},{"type":"text","text":": Dead code elimination works better"}]}]}],"type":"unorderedList"},{"text":"App Store Submission","level":2,"anchor":"App-Store-Submission","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Ensure compliance when submitting:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Include all required architectures (arm64 for devices)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Remove simulator architectures from release builds"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Properly sign all embedded libraries","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Document third-party code usage"}]}]}],"type":"orderedList"},{"text":"Next Steps","level":2,"anchor":"Next-Steps","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/AndroidIntegration"},{"type":"text","text":" for similar static library approach on Android"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn about "},{"type":"text","text":"doc:DeploymentGuide"},{"type":"text","text":" for other platforms"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Explore "},{"type":"text","text":"doc:AdvancedFunctions"},{"type":"text","text":" for complex extension features"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/WindowsDeployment":{"abstract":[{"type":"text","text":"Deploy SQLite extensions as loadable DLL files on Windows systems."}],"title":"Windows Deployment","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/WindowsDeployment","type":"topic","role":"article","kind":"article","url":"\/documentation\/sqliteextensionkit\/windowsdeployment"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit":{"type":"topic","role":"collection","kind":"symbol","url":"\/documentation\/sqliteextensionkit","abstract":[{"type":"text","text":"Build type-safe SQLite extensions with Swift."}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit","title":"SQLiteExtensionKit"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/AndroidIntegration":{"title":"Android Integration","type":"topic","url":"\/documentation\/sqliteextensionkit\/androidintegration","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/AndroidIntegration","kind":"article","role":"article","abstract":[{"type":"text","text":"Integrate Swift-based SQLite extensions into Android applications."}]},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/LinuxDeployment":{"url":"\/documentation\/sqliteextensionkit\/linuxdeployment","title":"Linux Deployment","type":"topic","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/LinuxDeployment","kind":"article","role":"article","abstract":[{"text":"Deploy SQLite extensions as loadable libraries on Linux systems.","type":"text"}]}}}