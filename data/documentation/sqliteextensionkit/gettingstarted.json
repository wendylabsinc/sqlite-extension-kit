{"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Learn how to build your first SQLite extension with Swift."}],"seeAlsoSections":[{"generated":true,"title":"Getting Started","anchor":"Getting-Started","identifiers":["doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/ProjectOverview"]}],"identifier":{"url":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/GettingStarted","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Article","role":"article","title":"Getting Started with SQLiteExtensionKit","modules":[{"name":"SQLiteExtensionKit"}]},"kind":"article","sections":[],"variants":[{"paths":["\/documentation\/sqliteextensionkit\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"SQLiteExtensionKit makes it easy to extend SQLite with custom functions written in Swift. This guide walks you through creating a simple extension, building it, and loading it into SQLite.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Installation","anchor":"Installation","type":"heading"},{"level":3,"text":"Swift Package Manager","anchor":"Swift-Package-Manager","type":"heading"},{"inlineContent":[{"text":"Add SQLiteExtensionKit to your ","type":"text"},{"type":"codeVoice","code":"Package.swift"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["dependencies: [","    .package(url: \"https:\/\/github.com\/wendylabsinc\/sqlite-extension-kit\", from: \"0.0.3\")","]"],"type":"codeListing"},{"level":3,"text":"Requirements","anchor":"Requirements","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift 6.0 or later","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SQLite 3.x"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Supported platforms: macOS 13+, iOS 16+, Linux"}]}]}],"type":"unorderedList"},{"level":2,"text":"Your First Extension","anchor":"Your-First-Extension","type":"heading"},{"level":3,"text":"1. Create the Extension Module","anchor":"1-Create-the-Extension-Module","type":"heading"},{"inlineContent":[{"type":"text","text":"Create a new Swift file for your extension:"}],"type":"paragraph"},{"syntax":"swift","code":["import SQLiteExtensionKit","","public struct MyExtension: SQLiteExtensionModule {","    public static let name = \"my_extension\"","","    public static func register(with db: SQLiteDatabase) throws {","        \/\/ Register a simple doubling function","        try db.createScalarFunction(name: \"double\") { context, args in","            guard let first = args.first else {","                context.resultNull()","                return","            }","            context.result(first.intValue * 2)","        }","    }","}"],"type":"codeListing"},{"level":3,"text":"2. Export the Entry Point","anchor":"2-Export-the-Entry-Point","type":"heading"},{"inlineContent":[{"type":"text","text":"SQLite requires a C-compatible entry point with a specific naming convention:"}],"type":"paragraph"},{"syntax":"swift","code":["@_cdecl(\"sqlite3_myextension_init\")","public func sqlite3_myextension_init(","    db: OpaquePointer?,","    pzErrMsg: UnsafeMutablePointer<UnsafeMutablePointer<CChar>?>?,","    pApi: UnsafePointer<sqlite3_api_routines>?",") -> Int32 {","    return MyExtension.entryPoint(db: db, pzErrMsg: pzErrMsg, pApi: pApi)","}"],"type":"codeListing"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Naming Convention"}]},{"type":"text","text":": The function must be named "},{"type":"codeVoice","code":"sqlite3_<extension_name>_init"},{"type":"text","text":" where "},{"type":"codeVoice","code":"<extension_name>"},{"type":"text","text":" matches your library name (lowercased)."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"If you need a custom entry point implementation, call "},{"isActive":true,"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/initializeExtensionIfNeeded(_:)","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"with the supplied "},{"type":"codeVoice","code":"pApi"},{"type":"text","text":" pointer before invoking any SQLite APIs."}],"type":"paragraph"}],"style":"tip","name":"Tip","type":"aside"},{"level":3,"text":"3. Configure Your Package","anchor":"3-Configure-Your-Package","type":"heading"},{"inlineContent":[{"text":"Update your ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":" to build a dynamic library:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let package = Package(","    name: \"MyExtension\",","    products: [","        .library(","            name: \"MyExtension\",","            type: .dynamic,","            targets: [\"MyExtension\"]","        )","    ],","    dependencies: [","        .package(url: \"https:\/\/github.com\/yourusername\/SQLiteExtensionKit\", from: \"0.0.3\")","    ],","    targets: [","        .target(","            name: \"MyExtension\",","            dependencies: [\"SQLiteExtensionKit\"]","        )","    ]",")"],"type":"codeListing"},{"level":3,"text":"4. Build the Extension","anchor":"4-Build-the-Extension","type":"heading"},{"syntax":"bash","code":["# Build in release mode for production","swift build -c release","","# The extension will be at:","# macOS: .build\/release\/libMyExtension.dylib","# Linux: .build\/release\/libMyExtension.so"],"type":"codeListing"},{"level":3,"text":"5. Load and Use the Extension","anchor":"5-Load-and-Use-the-Extension","type":"heading"},{"level":4,"text":"In SQLite CLI","anchor":"In-SQLite-CLI","type":"heading"},{"syntax":"sql","code":["-- Load the extension",".load .build\/release\/libMyExtension.dylib","","-- Use your function","SELECT double(21);  -- Returns 42"],"type":"codeListing"},{"level":4,"text":"In Code","anchor":"In-Code","type":"heading"},{"syntax":"swift","code":["import CSQLite","","var db: OpaquePointer?","sqlite3_open(\":memory:\", &db)","","\/\/ Enable extension loading","sqlite3_enable_load_extension(db, 1)","","\/\/ Load the extension","let path = \".build\/release\/libMyExtension.dylib\"","var errMsg: UnsafeMutablePointer<CChar>?","let result = sqlite3_load_extension(db, path, nil, &errMsg)","","if result != SQLITE_OK {","    print(\"Error loading extension: \\(String(cString: errMsg!))\")","    sqlite3_free(errMsg)","}","","\/\/ Use the function","var stmt: OpaquePointer?","sqlite3_prepare_v2(db, \"SELECT double(21)\", -1, &stmt, nil)","sqlite3_step(stmt)","let result = sqlite3_column_int64(stmt, 0)  \/\/ 42"],"type":"codeListing"},{"level":2,"text":"Managing Aggregate State","anchor":"Managing-Aggregate-State","type":"heading"},{"inlineContent":[{"text":"Aggregate and window functions often need to keep mutable state between calls to their step and","type":"text"},{"text":" ","type":"text"},{"text":"final callbacks. SQLiteExtensionKit offers helpers on ","type":"text"},{"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/SQLiteContext","isActive":true,"type":"reference"},{"text":" to manage that state safely.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["try db.createAggregateFunction(","    name: \"running_total\",","    argumentCount: 1,","    step: { context, args in","        guard let value = args.first?.doubleValue else { return }","","        context.withAggregateValue(initialValue: 0.0) { sum in","            sum += value","        }","    },","    final: { context in","        if !context.withExistingAggregateValue(Double.self, clearOnExit: true, { sum in","            context.result(sum)","        }) {","            context.result(0.0)","        }","    }",")"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Use "},{"type":"reference","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/SQLiteContext\/aggregateState(create:)","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/SQLiteContext\/existingAggregateState(_:)","isActive":true},{"type":"text","text":" when"},{"type":"text","text":" "},{"type":"text","text":"you need reference semantics instead of copyable valuesâ€”the window function examples in this package"},{"type":"text","text":" "},{"type":"text","text":"show how to model more complex state machines."}],"type":"paragraph"},{"level":2,"text":"Virtual Tables","anchor":"Virtual-Tables","type":"heading"},{"inlineContent":[{"type":"text","text":"You can expose Swift data sources as SQLite virtual tables without writing C glue code. Register the"},{"type":"text","text":" "},{"type":"text","text":"module with "},{"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/SQLiteDatabase\/registerVirtualTableModule(name:module:)","isActive":true,"type":"reference"},{"type":"text","text":" and then create the table via"},{"type":"text","text":" "},{"type":"text","text":"SQL:"}],"type":"paragraph"},{"syntax":"swift","code":["try db.registerVirtualTableModule(name: \"keyvalue\", module: KeyValueVirtualTable.self)","sqlite3_exec(db, \"CREATE VIRTUAL TABLE kv USING keyvalue\", nil, nil, nil)"],"type":"codeListing"},{"inlineContent":[{"text":"Implement ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/VirtualTableModule"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/VirtualTableCursor"},{"text":" to describe the schema, indexing","type":"text"},{"text":" ","type":"text"},{"text":"behaviour, and row iteration. The included ","type":"text"},{"type":"codeVoice","code":"KeyValueVirtualTable"},{"text":" example demonstrates an in-memory","type":"text"},{"text":" ","type":"text"},{"text":"key\/value store implemented entirely in Swift.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Understanding Value Types","anchor":"Understanding-Value-Types","type":"heading"},{"inlineContent":[{"type":"text","text":"SQLiteExtensionKit provides type-safe access to SQLite values:"}],"type":"paragraph"},{"syntax":"swift","code":["try db.createScalarFunction(name: \"type_aware\") { context, args in","    guard let value = args.first else {","        context.resultNull()","        return","    }","","    switch value.type {","    case .integer:","        context.result(value.intValue * 2)","    case .real:","        context.result(value.doubleValue * 2.0)","    case .text:","        context.result(value.textValue.uppercased())","    case .blob:","        context.result(Data(value.blobValue.reversed()))","    case .null:","        context.resultNull()","    }","}"],"type":"codeListing"},{"level":2,"text":"Error Handling","anchor":"Error-Handling","type":"heading"},{"inlineContent":[{"type":"text","text":"Report errors to SQLite using the context:"}],"type":"paragraph"},{"syntax":"swift","code":["try db.createScalarFunction(name: \"safe_divide\") { context, args in","    guard args.count == 2 else {","        context.resultError(\"safe_divide() requires 2 arguments\")","        return","    }","","    let divisor = args[1].doubleValue","    if divisor == 0 {","        context.resultError(\"Division by zero\")","        return","    }","","    context.result(args[0].doubleValue \/ divisor)","}"],"type":"codeListing"},{"level":2,"text":"Next Steps","anchor":"Next-Steps","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Learn about "},{"type":"text","text":"doc:CreatingYourFirstExtension"},{"type":"text","text":" in detail"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Explore deployment options in "},{"type":"text","text":"doc:DeploymentGuide"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See platform-specific integration for "},{"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/iOSIntegration","isActive":true,"type":"reference"},{"type":"text","text":" or "},{"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/LinuxDeployment","isActive":true,"type":"reference"}]}]}],"type":"unorderedList"}]}],"hierarchy":{"paths":[["doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit"]]},"references":{"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit":{"type":"topic","role":"collection","kind":"symbol","url":"\/documentation\/sqliteextensionkit","abstract":[{"type":"text","text":"Build type-safe SQLite extensions with Swift."}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit","title":"SQLiteExtensionKit"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/VirtualTableCursor":{"title":"VirtualTableCursor","abstract":[{"text":"A cursor for iterating over virtual table rows.","type":"text"}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/VirtualTableCursor","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VirtualTableCursor"}],"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/sqliteextensionkit\/virtualtablecursor","navigatorTitle":[{"kind":"identifier","text":"VirtualTableCursor"}]},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/VirtualTableModule":{"abstract":[{"type":"text","text":"A protocol for implementing SQLite virtual tables."}],"title":"VirtualTableModule","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/VirtualTableModule","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VirtualTableModule"}],"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/sqliteextensionkit\/virtualtablemodule","navigatorTitle":[{"kind":"identifier","text":"VirtualTableModule"}]},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/ProjectOverview":{"type":"topic","role":"article","kind":"article","url":"\/documentation\/sqliteextensionkit\/projectoverview","abstract":[{"type":"text","text":"A comprehensive overview of the SQLiteExtensionKit project, including build status, testing coverage, and production readiness."}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/ProjectOverview","title":"Project Overview"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/SQLiteContext/existingAggregateState(_:)":{"abstract":[{"text":"Returns the existing aggregate state if one has been created.","type":"text"}],"title":"existingAggregateState(_:)","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/SQLiteContext\/existingAggregateState(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"existingAggregateState","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/sqliteextensionkit\/sqlitecontext\/existingaggregatestate(_:)"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/SQLiteDatabase/registerVirtualTableModule(name:module:)":{"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/sqliteextensionkit\/sqlitedatabase\/registervirtualtablemodule(name:module:)","abstract":[{"text":"Registers a virtual table module with the database.","type":"text"}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/SQLiteDatabase\/registerVirtualTableModule(name:module:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"registerVirtualTableModule"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Module"},{"kind":"text","text":">("},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"module"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Module"},{"kind":"text","text":".Type) "},{"kind":"keyword","text":"throws"}],"title":"registerVirtualTableModule(name:module:)"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/LinuxDeployment":{"url":"\/documentation\/sqliteextensionkit\/linuxdeployment","title":"Linux Deployment","type":"topic","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/LinuxDeployment","kind":"article","role":"article","abstract":[{"text":"Deploy SQLite extensions as loadable libraries on Linux systems.","type":"text"}]},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/initializeExtensionIfNeeded(_:)":{"abstract":[{"text":"Initializes the SQLite extension API if it has not already been initialised.","type":"text"}],"title":"initializeExtensionIfNeeded(_:)","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/initializeExtensionIfNeeded(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"initializeExtensionIfNeeded"},{"kind":"text","text":"("},{"preciseIdentifier":"s:SP","kind":"typeIdentifier","text":"UnsafePointer"},{"kind":"text","text":"<"},{"preciseIdentifier":"c:@S@sqlite3_api_routines","kind":"typeIdentifier","text":"sqlite3_api_routines"},{"kind":"text","text":">?)"}],"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/sqliteextensionkit\/initializeextensionifneeded(_:)"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/iOSIntegration":{"type":"topic","role":"article","kind":"article","url":"\/documentation\/sqliteextensionkit\/iosintegration","abstract":[{"type":"text","text":"Integrate SQLite extensions into iOS applications using static libraries."}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/iOSIntegration","title":"iOS Integration"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/SQLiteContext/aggregateState(create:)":{"title":"aggregateState(create:)","abstract":[{"text":"Returns an aggregate state object, creating it if necessary.","type":"text"}],"identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/SQLiteContext\/aggregateState(create:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"aggregateState","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"create","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/sqliteextensionkit\/sqlitecontext\/aggregatestate(create:)"},"doc://SQLiteExtensionKit/documentation/SQLiteExtensionKit/SQLiteContext":{"abstract":[{"type":"text","text":"Represents the execution context for a SQLite function."}],"title":"SQLiteContext","identifier":"doc:\/\/SQLiteExtensionKit\/documentation\/SQLiteExtensionKit\/SQLiteContext","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SQLiteContext","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/sqliteextensionkit\/sqlitecontext","navigatorTitle":[{"text":"SQLiteContext","kind":"identifier"}]}}}